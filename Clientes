import tkinter as tk
from tkinter import ttk
import sqlite3
from tkinter import *
from usuarios import Clientes


# Função para conectar ao banco de dados e buscar os dados
def fetch_data():
    conn = sqlite3.connect('banco.db')  # Conectando ao banco de dados
    cursor = conn.cursor()

    # Executando uma consulta SQL para pegar todos os dados da tabela
    cursor.execute("SELECT * FROM clientes")
    rows = cursor.fetchall()  # Buscando todos os resultados
    conn.close()

    return rows


# Função para popular a Treeview com os dados do banco
def populate_treeview(treeview, data):
    for row in data:
        treeview.insert("", "end", values=row)


# Função para limpar e repopular a Treeview
def update_treeview(treeview):
    treeview.delete(*treeview.get_children())  # Limpa todos os dados existentes
    data = fetch_data()  # Busca os dados atualizados
    populate_treeview(treeview, data)  # Reinsere os dados


class Application:
    def __init__(self, master=None):
        self.master = master
        self.master.title("Sistema de Gestão de Clientes")

        # Configuração do formulário
        self.fonte = ("Verdana", "8")
        self.container1 = Frame(master)
        self.container1["pady"] = 10
        self.container1.pack()

        self.container2 = Frame(master)
        self.container2["padx"] = 20
        self.container2["pady"] = 5
        self.container2.pack()

        self.container3 = Frame(master)
        self.container3["padx"] = 20
        self.container3["pady"] = 5
        self.container3.pack()

        self.container4 = Frame(master)
        self.container4["padx"] = 20
        self.container4["pady"] = 5
        self.container4.pack()

        self.container5 = Frame(master)
        self.container5["padx"] = 20
        self.container5["pady"] = 5
        self.container5.pack()

        self.container6 = Frame(master)
        self.container6["padx"] = 20
        self.container6["pady"] = 10
        self.container6.pack()

        self.container7 = Frame(master)
        self.container7["pady"] = 15
        self.container7.pack()

        self.titulo = Label(self.container1, text="Informe os dados do cliente:")
        self.titulo["font"] = ("Calibri", "9", "bold")
        self.titulo.pack()

        self.lblidcliente = Label(self.container2, text="idCliente:", font=self.fonte, width=10)
        self.lblidcliente.pack(side=LEFT)

        self.txtidcliente = Entry(self.container2)
        self.txtidcliente["width"] = 10
        self.txtidcliente["font"] = self.fonte
        self.txtidcliente.pack(side=LEFT)

        self.btnBuscar = Button(self.container2, text="Buscar", font=self.fonte, width=10)
        self.btnBuscar["command"] = self.buscarCliente
        self.btnBuscar.pack(side=RIGHT)

        self.lblnomecli = Label(self.container3, text="Nome:", font=self.fonte, width=10)
        self.lblnomecli.pack(side=LEFT)

        self.txtnomecli = Entry(self.container3)
        self.txtnomecli["width"] = 25
        self.txtnomecli["font"] = self.fonte
        self.txtnomecli.pack(side=LEFT)

        self.lblcpf = Label(self.container4, text="CPF:", font=self.fonte, width=10)
        self.lblcpf.pack(side=LEFT)

        self.txtcpf = Entry(self.container4)
        self.txtcpf["width"] = 25
        self.txtcpf["font"] = self.fonte
        self.txtcpf.pack(side=LEFT)

        self.lblemail = Label(self.container5, text="Email:", font=self.fonte, width=10)
        self.lblemail.pack(side=LEFT)

        self.txtemail = Entry(self.container5)
        self.txtemail["width"] = 25
        self.txtemail["font"] = self.fonte
        self.txtemail.pack(side=LEFT)

        self.lbltelefone = Label(self.container6, text="Telefone:", font=self.fonte, width=10)
        self.lbltelefone.pack(side=LEFT)

        self.txttelefone = Entry(self.container6)
        self.txttelefone["width"] = 25
        self.txttelefone["font"] = self.fonte
        self.txttelefone.pack(side=LEFT)

        self.bntInsert = Button(self.container7, text="Inserir", font=self.fonte, width=12)
        self.bntInsert["command"] = self.inserirCliente
        self.bntInsert.pack(side=LEFT)

        self.bntAlterar = Button(self.container7, text="Alterar", font=self.fonte, width=12)
        self.bntAlterar["command"] = self.alterarCliente
        self.bntAlterar.pack(side=LEFT)

        self.bntExcluir = Button(self.container7, text="Excluir", font=self.fonte, width=12)
        self.bntExcluir["command"] = self.excluirCliente
        self.bntExcluir.pack(side=LEFT)

        self.lblmsg = Label(self.container7, text="")
        self.lblmsg["font"] = ("Verdana", "9", "italic")
        self.lblmsg.pack()

        # Configuração da Treeview (Tabela)
        self.container8 = Frame(master)
        self.container8["pady"] = 10
        self.container8.pack(fill=tk.BOTH, expand=True)

        self.columns = ("ID", "Nome", "CPF", "Email", "Telefone")
        self.treeview = ttk.Treeview(self.container8, columns=self.columns, show='headings')
        for col in self.columns:
            self.treeview.heading(col, text=col)
        self.treeview.pack(fill=tk.BOTH, expand=True)

        # Preenchendo a Treeview com dados do banco ao iniciar
        self.update_treeview()

    def update_treeview(self):
        update_treeview(self.treeview)  # Atualiza a Treeview com os dados mais recentes

    def inserirCliente(self):
        cliente = Clientes()
        cliente.nomecli = self.txtnomecli.get()
        cliente.cpf = self.txtcpf.get()
        cliente.email = self.txtemail.get()
        cliente.telefone = self.txttelefone.get()

        self.lblmsg["text"] = cliente.insertCliente()

        self.txtidcliente.delete(0, END)
        self.txtnomecli.delete(0, END)
        self.txtcpf.delete(0, END)
        self.txtemail.delete(0, END)
        self.txttelefone.delete(0, END)

        self.update_treeview()  # Atualiza a Treeview após inserir

    def alterarCliente(self):
        cliente = Clientes()
        cliente.idcliente = self.txtidcliente.get()
        cliente.nomecli = self.txtnomecli.get()
        cliente.cpf = self.txtcpf.get()
        cliente.email = self.txtemail.get()
        cliente.telefone = self.txttelefone.get()

        self.lblmsg["text"] = cliente.updateCliente()

        self.txtidcliente.delete(0, END)
        self.txtnomecli.delete(0, END)
        self.txtcpf.delete(0, END)
        self.txtemail.delete(0, END)
        self.txttelefone.delete(0, END)

        self.update_treeview()  # Atualiza a Treeview após alterar

    def excluirCliente(self):
        cliente = Clientes()
        cliente.idcliente = self.txtidcliente.get()

        self.lblmsg["text"] = cliente.deleteCliente()

        self.txtidcliente.delete(0, END)
        self.txtnomecli.delete(0, END)
        self.txtcpf.delete(0, END)
        self.txtemail.delete(0, END)
        self.txttelefone.delete(0, END)

        self.update_treeview()  # Atualiza a Treeview após excluir

    def buscarCliente(self):
        cliente = Clientes()
        idcliente = self.txtidcliente.get()

        self.lblmsg["text"] = cliente.selectCliente(idcliente)

        # Preencher os campos com os dados do cliente encontrado
        self.txtidcliente.delete(0, END)
        self.txtidcliente.insert(INSERT, cliente.idcliente)
        self.txtnomecli.delete(0, END)
        self.txtnomecli.insert(INSERT, cliente.nomecli)
        self.txtcpf.delete(0, END)
        self.txtcpf.insert(INSERT, cliente.cpf)
        self.txtemail.delete(0, END)
        self.txtemail.insert(INSERT, cliente.email)
        self.txttelefone.delete(0, END)
        self.txttelefone.insert(INSERT, cliente.telefone)


root = Tk()
app = Application(root)
root.attributes('-fullscreen', True)
root.mainloop()
